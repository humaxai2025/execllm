import React, { useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { type LLMModel } from "../data/llms";

interface ComparisonModalProps {
  models: LLMModel[];
  onClose: () => void;
  onRemoveModel: (modelName: string) => void;
}

const costColors: Record<string, string> = {
  "Free": "bg-green-500 text-white",
  "Paid": "bg-blue-500 text-white"
};

const vendorColors: Record<string, string> = {
  "OpenAI": "text-green-400",
  "Anthropic": "text-orange-400", 
  "Google": "text-blue-400",
  "Meta": "text-purple-400",
  "Mistral AI": "text-cyan-400",
  "Cohere": "text-pink-400",
  "Perplexity": "text-indigo-400",
  "AI21 Labs": "text-teal-400",
  "Stability AI": "text-rose-400",
  "Technology Innovation Institute": "text-amber-400",
  "Zhipu AI": "text-emerald-400"
};

const comparisonRows = [
  { key: "vendor", label: "Vendor", type: "text" },
  { key: "cost", label: "Cost Tier", type: "badge" },
  { key: "category", label: "Category", type: "text" },
  { key: "releaseDate", label: "Release Year", type: "text" },
  { key: "modelSize", label: "Model Size", type: "text" },
  { key: "capabilities", label: "Key Capabilities", type: "list" },
  { key: "useCases", label: "Best Use Cases", type: "list" },
  { key: "deployment", label: "Deployment Options", type: "list" },
  { key: "summary", label: "Summary", type: "text" }
];

export function ComparisonModal({ models, onClose, onRemoveModel }: ComparisonModalProps) {
  // Close modal on Escape key
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') onClose();
    };
    
    document.addEventListener('keydown', handleEscape);
    document.body.style.overflow = 'hidden';
    
    return () => {
      document.removeEventListener('keydown', handleEscape);
      document.body.style.overflow = 'unset';
    };
  }, [onClose]);

  const exportComparison = () => {
    // Create a comprehensive comparison report
    const currentDate = new Date().toLocaleDateString();
    const comparisonReport = `
ExecLLM - AI Model Comparison Report
Generated on: ${currentDate}
Models Compared: ${models.length}

${'='.repeat(60)}

${models.map((model, index) => `
${index + 1}. ${model.name} by ${model.vendor}
${'─'.repeat(40)}
Cost Tier: ${model.cost}
Category: ${model.category || 'N/A'}
Release Year: ${model.releaseDate || 'N/A'}
Model Size: ${model.modelSize || 'N/A'}

Key Capabilities:
${model.capabilities.map(cap => `• ${cap}`).join('\n')}

Best Use Cases:
${model.useCases.map(use => `• ${use}`).join('\n')}

Deployment Options:
${model.deployment.map(dep => `• ${dep}`).join('\n')}

Summary:
${model.summary}

`).join('\n' + '='.repeat(60) + '\n')}

Report generated by ExecLLM - Executive AI Model Comparison Platform
Built with ❤️ by HumanXAI

For the latest information and interactive comparisons, visit ExecLLM.
`;

    const blob = new Blob([comparisonReport], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ExecLLM-Comparison-${models.map(m => m.name.replace(/\s+/g, '-')).join('-vs-')}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const renderCellContent = (model: LLMModel, row: typeof comparisonRows[0]) => {
    const value = model[row.key as keyof LLMModel];
    
    switch (row.type) {
      case "badge":
        if (row.key === "cost") {
          return (
            <span className={`px-3 py-1 rounded-full text-sm font-bold ${costColors[value as string] || "bg-gray-500 text-white"}`}>
              {value}
            </span>
          );
        }
        return value;
      
      case "list":
        if (Array.isArray(value)) {
          return (
            <div className="space-y-1">
              {value.slice(0, 4).map((item, index) => (
                <div key={index} className="text-sm bg-slate-700/30 px-2 py-1 rounded">
                  {item}
                </div>
              ))}
              {value.length > 4 && (
                <div className="text-xs text-slate-400">+{value.length - 4} more</div>
              )}
            </div>
          );
        }
        return value;
      
      case "text":
      default:
        if (row.key === "summary") {
          return <div className="text-sm leading-relaxed">{value}</div>;
        }
        return value || "N/A";
    }
  };

  return (
    <AnimatePresence>
      <motion.div
        className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        onClick={onClose}
      >
        <motion.div
          className="relative bg-gradient-to-br from-slate-800 to-slate-900 rounded-3xl shadow-2xl w-full max-w-7xl max-h-[90vh] overflow-hidden border border-slate-700/50"
          initial={{ scale: 0.9, opacity: 0, y: 20 }}
          animate={{ scale: 1, opacity: 1, y: 0 }}
          exit={{ scale: 0.9, opacity: 0, y: 20 }}
          transition={{ type: "spring", damping: 25, stiffness: 300 }}
          onClick={(e) => e.stopPropagation()}
        >
          {/* Header */}
          <div className="relative z-10 p-6 border-b border-slate-700/50">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-3xl font-bold bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent mb-2">
                  Model Comparison
                </h2>
                <p className="text-slate-400">
                  Comparing {models.length} AI model{models.length !== 1 ? 's' : ''} side-by-side
                </p>
              </div>
              
              <div className="flex items-center gap-3">
                <motion.button
                  onClick={exportComparison}
                  className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-all duration-200 text-sm font-medium flex items-center gap-2"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  Export
                </motion.button>
                
                <button
                  className="w-10 h-10 flex items-center justify-center rounded-full bg-slate-700/50 hover:bg-slate-600/50 text-slate-400 hover:text-white transition-all duration-200"
                  onClick={onClose}
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
          </div>

          {/* Comparison Table */}
          <div className="overflow-auto max-h-[calc(90vh-120px)]">
            <table className="w-full">
              <thead className="sticky top-0 bg-slate-800/95 backdrop-blur-sm border-b border-slate-700/50">
                <tr>
                  <td className="p-4 font-medium text-slate-300 w-48">Attribute</td>
                  {models.map((model) => (
                    <td key={model.name} className="p-4 min-w-80">
                      <div className="flex items-center justify-between">
                        <div>
                          <h3 className="text-lg font-bold text-white mb-1">{model.name}</h3>
                          <p className={`text-sm font-medium ${vendorColors[model.vendor] || "text-slate-400"}`}>
                            {model.vendor}
                          </p>
                        </div>
                        <button
                          onClick={() => onRemoveModel(model.name)}
                          className="p-1 text-slate-400 hover:text-red-400 transition-colors"
                          title="Remove from comparison"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>
                    </td>
                  ))}
                </tr>
              </thead>
              
              <tbody>
                {comparisonRows.map((row, rowIndex) => (
                  <tr 
                    key={row.key}
                    className={`border-b border-slate-700/30 ${rowIndex % 2 === 0 ? 'bg-slate-800/20' : 'bg-slate-800/10'}`}
                  >
                    <td className="p-4 font-medium text-slate-300 bg-slate-800/30">
                      {row.label}
                    </td>
                    {models.map((model) => (
                      <td key={`${model.name}-${row.key}`} className="p-4 text-slate-200 align-top">
                        {renderCellContent(model, row)}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Footer */}
          <div className="p-4 border-t border-slate-700/50 bg-slate-800/30">
            <div className="flex items-center justify-between text-sm text-slate-400">
              <div>
                Use checkboxes on model cards to add/remove models from comparison
              </div>
              <div>
                Press <kbd className="px-2 py-1 bg-slate-700 rounded text-xs">ESC</kbd> to close
              </div>
            </div>
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}